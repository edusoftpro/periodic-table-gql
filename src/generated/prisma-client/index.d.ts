// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  discoverer: (where?: DiscovererWhereInput) => Promise<boolean>;
  element: (where?: ElementWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  discoverer: (where: DiscovererWhereUniqueInput) => DiscovererNullablePromise;
  discoverers: (args?: {
    where?: DiscovererWhereInput;
    orderBy?: DiscovererOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Discoverer>;
  discoverersConnection: (args?: {
    where?: DiscovererWhereInput;
    orderBy?: DiscovererOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiscovererConnectionPromise;
  element: (where: ElementWhereUniqueInput) => ElementNullablePromise;
  elements: (args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Element>;
  elementsConnection: (args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ElementConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDiscoverer: (data: DiscovererCreateInput) => DiscovererPromise;
  updateDiscoverer: (args: {
    data: DiscovererUpdateInput;
    where: DiscovererWhereUniqueInput;
  }) => DiscovererPromise;
  updateManyDiscoverers: (args: {
    data: DiscovererUpdateManyMutationInput;
    where?: DiscovererWhereInput;
  }) => BatchPayloadPromise;
  upsertDiscoverer: (args: {
    where: DiscovererWhereUniqueInput;
    create: DiscovererCreateInput;
    update: DiscovererUpdateInput;
  }) => DiscovererPromise;
  deleteDiscoverer: (where: DiscovererWhereUniqueInput) => DiscovererPromise;
  deleteManyDiscoverers: (where?: DiscovererWhereInput) => BatchPayloadPromise;
  createElement: (data: ElementCreateInput) => ElementPromise;
  updateElement: (args: {
    data: ElementUpdateInput;
    where: ElementWhereUniqueInput;
  }) => ElementPromise;
  updateManyElements: (args: {
    data: ElementUpdateManyMutationInput;
    where?: ElementWhereInput;
  }) => BatchPayloadPromise;
  upsertElement: (args: {
    where: ElementWhereUniqueInput;
    create: ElementCreateInput;
    update: ElementUpdateInput;
  }) => ElementPromise;
  deleteElement: (where: ElementWhereUniqueInput) => ElementPromise;
  deleteManyElements: (where?: ElementWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  discoverer: (
    where?: DiscovererSubscriptionWhereInput
  ) => DiscovererSubscriptionPayloadSubscription;
  element: (
    where?: ElementSubscriptionWhereInput
  ) => ElementSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ElementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "atomicNumber_ASC"
  | "atomicNumber_DESC"
  | "atomicMass_ASC"
  | "atomicMass_DESC"
  | "symbol_ASC"
  | "symbol_DESC"
  | "name_ASC"
  | "name_DESC";

export type DiscovererOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DiscovererWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ElementWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  discoverer?: Maybe<DiscovererWhereInput>;
  atomicNumber?: Maybe<Int>;
  atomicNumber_not?: Maybe<Int>;
  atomicNumber_in?: Maybe<Int[] | Int>;
  atomicNumber_not_in?: Maybe<Int[] | Int>;
  atomicNumber_lt?: Maybe<Int>;
  atomicNumber_lte?: Maybe<Int>;
  atomicNumber_gt?: Maybe<Int>;
  atomicNumber_gte?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  atomicMass_not?: Maybe<Float>;
  atomicMass_in?: Maybe<Float[] | Float>;
  atomicMass_not_in?: Maybe<Float[] | Float>;
  atomicMass_lt?: Maybe<Float>;
  atomicMass_lte?: Maybe<Float>;
  atomicMass_gt?: Maybe<Float>;
  atomicMass_gte?: Maybe<Float>;
  symbol?: Maybe<String>;
  symbol_not?: Maybe<String>;
  symbol_in?: Maybe<String[] | String>;
  symbol_not_in?: Maybe<String[] | String>;
  symbol_lt?: Maybe<String>;
  symbol_lte?: Maybe<String>;
  symbol_gt?: Maybe<String>;
  symbol_gte?: Maybe<String>;
  symbol_contains?: Maybe<String>;
  symbol_not_contains?: Maybe<String>;
  symbol_starts_with?: Maybe<String>;
  symbol_not_starts_with?: Maybe<String>;
  symbol_ends_with?: Maybe<String>;
  symbol_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ElementWhereInput[] | ElementWhereInput>;
  OR?: Maybe<ElementWhereInput[] | ElementWhereInput>;
  NOT?: Maybe<ElementWhereInput[] | ElementWhereInput>;
}

export interface DiscovererWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  elements_every?: Maybe<ElementWhereInput>;
  elements_some?: Maybe<ElementWhereInput>;
  elements_none?: Maybe<ElementWhereInput>;
  AND?: Maybe<DiscovererWhereInput[] | DiscovererWhereInput>;
  OR?: Maybe<DiscovererWhereInput[] | DiscovererWhereInput>;
  NOT?: Maybe<DiscovererWhereInput[] | DiscovererWhereInput>;
}

export type ElementWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface DiscovererCreateInput {
  id?: Maybe<Int>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  elements?: Maybe<ElementCreateManyWithoutDiscovererInput>;
}

export interface ElementCreateManyWithoutDiscovererInput {
  create?: Maybe<
    ElementCreateWithoutDiscovererInput[] | ElementCreateWithoutDiscovererInput
  >;
  connect?: Maybe<ElementWhereUniqueInput[] | ElementWhereUniqueInput>;
}

export interface ElementCreateWithoutDiscovererInput {
  id?: Maybe<Int>;
  atomicNumber: Int;
  atomicMass: Float;
  symbol: String;
  name: String;
}

export interface DiscovererUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  elements?: Maybe<ElementUpdateManyWithoutDiscovererInput>;
}

export interface ElementUpdateManyWithoutDiscovererInput {
  create?: Maybe<
    ElementCreateWithoutDiscovererInput[] | ElementCreateWithoutDiscovererInput
  >;
  delete?: Maybe<ElementWhereUniqueInput[] | ElementWhereUniqueInput>;
  connect?: Maybe<ElementWhereUniqueInput[] | ElementWhereUniqueInput>;
  set?: Maybe<ElementWhereUniqueInput[] | ElementWhereUniqueInput>;
  disconnect?: Maybe<ElementWhereUniqueInput[] | ElementWhereUniqueInput>;
  update?: Maybe<
    | ElementUpdateWithWhereUniqueWithoutDiscovererInput[]
    | ElementUpdateWithWhereUniqueWithoutDiscovererInput
  >;
  upsert?: Maybe<
    | ElementUpsertWithWhereUniqueWithoutDiscovererInput[]
    | ElementUpsertWithWhereUniqueWithoutDiscovererInput
  >;
  deleteMany?: Maybe<ElementScalarWhereInput[] | ElementScalarWhereInput>;
  updateMany?: Maybe<
    | ElementUpdateManyWithWhereNestedInput[]
    | ElementUpdateManyWithWhereNestedInput
  >;
}

export interface ElementUpdateWithWhereUniqueWithoutDiscovererInput {
  where: ElementWhereUniqueInput;
  data: ElementUpdateWithoutDiscovererDataInput;
}

export interface ElementUpdateWithoutDiscovererDataInput {
  atomicNumber?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  symbol?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ElementUpsertWithWhereUniqueWithoutDiscovererInput {
  where: ElementWhereUniqueInput;
  update: ElementUpdateWithoutDiscovererDataInput;
  create: ElementCreateWithoutDiscovererInput;
}

export interface ElementScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  atomicNumber?: Maybe<Int>;
  atomicNumber_not?: Maybe<Int>;
  atomicNumber_in?: Maybe<Int[] | Int>;
  atomicNumber_not_in?: Maybe<Int[] | Int>;
  atomicNumber_lt?: Maybe<Int>;
  atomicNumber_lte?: Maybe<Int>;
  atomicNumber_gt?: Maybe<Int>;
  atomicNumber_gte?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  atomicMass_not?: Maybe<Float>;
  atomicMass_in?: Maybe<Float[] | Float>;
  atomicMass_not_in?: Maybe<Float[] | Float>;
  atomicMass_lt?: Maybe<Float>;
  atomicMass_lte?: Maybe<Float>;
  atomicMass_gt?: Maybe<Float>;
  atomicMass_gte?: Maybe<Float>;
  symbol?: Maybe<String>;
  symbol_not?: Maybe<String>;
  symbol_in?: Maybe<String[] | String>;
  symbol_not_in?: Maybe<String[] | String>;
  symbol_lt?: Maybe<String>;
  symbol_lte?: Maybe<String>;
  symbol_gt?: Maybe<String>;
  symbol_gte?: Maybe<String>;
  symbol_contains?: Maybe<String>;
  symbol_not_contains?: Maybe<String>;
  symbol_starts_with?: Maybe<String>;
  symbol_not_starts_with?: Maybe<String>;
  symbol_ends_with?: Maybe<String>;
  symbol_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ElementScalarWhereInput[] | ElementScalarWhereInput>;
  OR?: Maybe<ElementScalarWhereInput[] | ElementScalarWhereInput>;
  NOT?: Maybe<ElementScalarWhereInput[] | ElementScalarWhereInput>;
}

export interface ElementUpdateManyWithWhereNestedInput {
  where: ElementScalarWhereInput;
  data: ElementUpdateManyDataInput;
}

export interface ElementUpdateManyDataInput {
  atomicNumber?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  symbol?: Maybe<String>;
  name?: Maybe<String>;
}

export interface DiscovererUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
}

export interface ElementCreateInput {
  id?: Maybe<Int>;
  discoverer?: Maybe<DiscovererCreateOneWithoutElementsInput>;
  atomicNumber: Int;
  atomicMass: Float;
  symbol: String;
  name: String;
}

export interface DiscovererCreateOneWithoutElementsInput {
  create?: Maybe<DiscovererCreateWithoutElementsInput>;
  connect?: Maybe<DiscovererWhereUniqueInput>;
}

export interface DiscovererCreateWithoutElementsInput {
  id?: Maybe<Int>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
}

export interface ElementUpdateInput {
  discoverer?: Maybe<DiscovererUpdateOneWithoutElementsInput>;
  atomicNumber?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  symbol?: Maybe<String>;
  name?: Maybe<String>;
}

export interface DiscovererUpdateOneWithoutElementsInput {
  create?: Maybe<DiscovererCreateWithoutElementsInput>;
  update?: Maybe<DiscovererUpdateWithoutElementsDataInput>;
  upsert?: Maybe<DiscovererUpsertWithoutElementsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DiscovererWhereUniqueInput>;
}

export interface DiscovererUpdateWithoutElementsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
}

export interface DiscovererUpsertWithoutElementsInput {
  update: DiscovererUpdateWithoutElementsDataInput;
  create: DiscovererCreateWithoutElementsInput;
}

export interface ElementUpdateManyMutationInput {
  atomicNumber?: Maybe<Int>;
  atomicMass?: Maybe<Float>;
  symbol?: Maybe<String>;
  name?: Maybe<String>;
}

export interface DiscovererSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiscovererWhereInput>;
  AND?: Maybe<
    DiscovererSubscriptionWhereInput[] | DiscovererSubscriptionWhereInput
  >;
  OR?: Maybe<
    DiscovererSubscriptionWhereInput[] | DiscovererSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DiscovererSubscriptionWhereInput[] | DiscovererSubscriptionWhereInput
  >;
}

export interface ElementSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ElementWhereInput>;
  AND?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
  OR?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
  NOT?: Maybe<ElementSubscriptionWhereInput[] | ElementSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Discoverer {
  id: Int;
  firstName?: String;
  lastName?: String;
}

export interface DiscovererPromise extends Promise<Discoverer>, Fragmentable {
  id: () => Promise<Int>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  elements: <T = FragmentableArray<Element>>(args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiscovererSubscription
  extends Promise<AsyncIterator<Discoverer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  elements: <T = Promise<AsyncIterator<ElementSubscription>>>(args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiscovererNullablePromise
  extends Promise<Discoverer | null>,
    Fragmentable {
  id: () => Promise<Int>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  elements: <T = FragmentableArray<Element>>(args?: {
    where?: ElementWhereInput;
    orderBy?: ElementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Element {
  id: Int;
  atomicNumber: Int;
  atomicMass: Float;
  symbol: String;
  name: String;
}

export interface ElementPromise extends Promise<Element>, Fragmentable {
  id: () => Promise<Int>;
  discoverer: <T = DiscovererPromise>() => T;
  atomicNumber: () => Promise<Int>;
  atomicMass: () => Promise<Float>;
  symbol: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ElementSubscription
  extends Promise<AsyncIterator<Element>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  discoverer: <T = DiscovererSubscription>() => T;
  atomicNumber: () => Promise<AsyncIterator<Int>>;
  atomicMass: () => Promise<AsyncIterator<Float>>;
  symbol: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ElementNullablePromise
  extends Promise<Element | null>,
    Fragmentable {
  id: () => Promise<Int>;
  discoverer: <T = DiscovererPromise>() => T;
  atomicNumber: () => Promise<Int>;
  atomicMass: () => Promise<Float>;
  symbol: () => Promise<String>;
  name: () => Promise<String>;
}

export interface DiscovererConnection {
  pageInfo: PageInfo;
  edges: DiscovererEdge[];
}

export interface DiscovererConnectionPromise
  extends Promise<DiscovererConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiscovererEdge>>() => T;
  aggregate: <T = AggregateDiscovererPromise>() => T;
}

export interface DiscovererConnectionSubscription
  extends Promise<AsyncIterator<DiscovererConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiscovererEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiscovererSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DiscovererEdge {
  node: Discoverer;
  cursor: String;
}

export interface DiscovererEdgePromise
  extends Promise<DiscovererEdge>,
    Fragmentable {
  node: <T = DiscovererPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiscovererEdgeSubscription
  extends Promise<AsyncIterator<DiscovererEdge>>,
    Fragmentable {
  node: <T = DiscovererSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDiscoverer {
  count: Int;
}

export interface AggregateDiscovererPromise
  extends Promise<AggregateDiscoverer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiscovererSubscription
  extends Promise<AsyncIterator<AggregateDiscoverer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ElementConnection {
  pageInfo: PageInfo;
  edges: ElementEdge[];
}

export interface ElementConnectionPromise
  extends Promise<ElementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ElementEdge>>() => T;
  aggregate: <T = AggregateElementPromise>() => T;
}

export interface ElementConnectionSubscription
  extends Promise<AsyncIterator<ElementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ElementEdgeSubscription>>>() => T;
  aggregate: <T = AggregateElementSubscription>() => T;
}

export interface ElementEdge {
  node: Element;
  cursor: String;
}

export interface ElementEdgePromise extends Promise<ElementEdge>, Fragmentable {
  node: <T = ElementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ElementEdgeSubscription
  extends Promise<AsyncIterator<ElementEdge>>,
    Fragmentable {
  node: <T = ElementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateElement {
  count: Int;
}

export interface AggregateElementPromise
  extends Promise<AggregateElement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateElementSubscription
  extends Promise<AsyncIterator<AggregateElement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DiscovererSubscriptionPayload {
  mutation: MutationType;
  node: Discoverer;
  updatedFields: String[];
  previousValues: DiscovererPreviousValues;
}

export interface DiscovererSubscriptionPayloadPromise
  extends Promise<DiscovererSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiscovererPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiscovererPreviousValuesPromise>() => T;
}

export interface DiscovererSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiscovererSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiscovererSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiscovererPreviousValuesSubscription>() => T;
}

export interface DiscovererPreviousValues {
  id: Int;
  firstName?: String;
  lastName?: String;
}

export interface DiscovererPreviousValuesPromise
  extends Promise<DiscovererPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface DiscovererPreviousValuesSubscription
  extends Promise<AsyncIterator<DiscovererPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

export interface ElementSubscriptionPayload {
  mutation: MutationType;
  node: Element;
  updatedFields: String[];
  previousValues: ElementPreviousValues;
}

export interface ElementSubscriptionPayloadPromise
  extends Promise<ElementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ElementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ElementPreviousValuesPromise>() => T;
}

export interface ElementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ElementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ElementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ElementPreviousValuesSubscription>() => T;
}

export interface ElementPreviousValues {
  id: Int;
  atomicNumber: Int;
  atomicMass: Float;
  symbol: String;
  name: String;
}

export interface ElementPreviousValuesPromise
  extends Promise<ElementPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  atomicNumber: () => Promise<Int>;
  atomicMass: () => Promise<Float>;
  symbol: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ElementPreviousValuesSubscription
  extends Promise<AsyncIterator<ElementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  atomicNumber: () => Promise<AsyncIterator<Int>>;
  atomicMass: () => Promise<AsyncIterator<Float>>;
  symbol: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
